name: Build

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: waspinput
  NAME_WIN32: wasplib32.dll
  NAME_WIN64: wasplib64.dll

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [i686-pc-windows-msvc, x86_64-pc-windows-msvc]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target=${{ matrix.target }}

      - name: Rename output DLL
        run: |
          $target = "${{ matrix.target }}"
          $original = "target\$target\release\$env:PROJECT_NAME.dll"

          if ($target -eq "i686-pc-windows-msvc") {
            $renamed = "target\$target\release\$env:NAME_WIN32"
          } else {
            $renamed = "target\$target\release\$env:NAME_WIN64"
          }

          if (Test-Path $original) {
            Move-Item $original $renamed -Force
            Write-Host "Renamed $original to $renamed"
          } else {
            Write-Host "DLL not found: $original"
            exit 1
          }
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-dll
          path: |
            target/${{ matrix.target }}/release/${{ matrix.target == 'i686-pc-windows-msvc' && env.NAME_WIN32 || env.NAME_WIN64 }}
